@inject IWebHostEnvironment Env

@{
    ViewData["Title"] = "Home Page";
    
    // Use the Url helper to generate the correct path for the client-side component
    var myLibUrl = Url.Content("~/client-components/my-lib.js");
    if (Env.IsDevelopment())
    {
        myLibUrl = Url.Content("~/src/main.ts");
    }
}

<div class="text-center">
    <h1 class="text-xl">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<div class="grid md:grid-cols-2 gap-4">
    <div id="component-container-1"></div>
    <div id="component-container-2"></div>
    <div id="component-container-3"></div>
    <my-element-component-shadow></my-element-component-shadow>
    <my-element-component-non-shadow></my-element-component-non-shadow>
</div>

@section Scripts
{
    <environment include="Development">
        <script type="module" src="https://localhost:5173/@@vite/client"></script>
    </environment>
    
    <script type="module" defer>
        import { App, MyTest, MyElementComponent, myRender, register } from '@myLibUrl';
        
        // Render the react components here. Web components don't need this.
        myRender(App, document.getElementById('component-container-1'), { initcount: 5, class: 'bg-blue' }); 
        myRender(App, document.getElementById('component-container-2'), { initcount: 10, class: 'bg-red' });
        myRender(MyTest, document.getElementById('component-container-3'));
        
        // Web components registration
        register(MyElementComponent, 'my-element-component-shadow', [], { shadow: true });
        register(MyElementComponent, 'my-element-component-non-shadow', [], { shadow: false });
    </script>
}
